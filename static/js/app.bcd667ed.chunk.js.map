{"version":3,"sources":["colors.js","App.js"],"names":["theme","App","useState","working","setWorking","text","setText","toDos","setToDos","useEffect","loadToDos","saveToDos","toSave","a","async","AsyncStorage","setItem","JSON","stringify","getItem","s","parse","View","style","styles","container","StatusBar","header","TouchableOpacity","onPress","Text","fontSize","color","TextInput","onSubmitEditing","newToDos","Date","now","returnKeyType","onChangeText","payload","value","placeholder","input","ScrollView","Object","keys","map","key","toDo","toDoText","Platform","OS","confirm","Alert","alert","deleteToDo","Fontisto","name","size","StyleSheet","create","flex","backgroundColor","paddingHorizontal","justifyContent","flexDirection","marginTop","btnText","paddingVertical","borderRadius","marginVertical","marginBottom","alignItems","fontWeight"],"mappings":"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","file":"static/js/app.bcd667ed.chunk.js","sourcesContent":["export const theme = {\r\n    bg:\"black\",\r\n    grey: \"#3A3D40\",\r\n}","import { StatusBar } from 'expo-status-bar';\nimport React, { useEffect, useState } from 'react';\nimport { StyleSheet, Text, View, TouchableOpacity, TextInput, ScrollView, Alert, Platform } from 'react-native';\nimport { theme } from './colors';\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport {Fontisto} from \"@expo/vector-icons\"\n\nconst STORAGE_KEY = \"@toDos\"\n\nexport default function App() {\n  const [working, setWorking] = useState(true);\n  const [text, setText] = useState(\"\")\n  const [toDos, setToDos] = useState({})\n\n  useEffect(() => {\n    loadToDos()\n  }, [])\n\n  const travel = () => setWorking(false);\n  const work = () => setWorking(true);\n  const onChangeText = (payload) => setText(payload)\n  const saveToDos = async (toSave) => {\n    await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(toSave))\n  }\n  const loadToDos = async () => {\n    const s = await AsyncStorage.getItem(STORAGE_KEY)\n    s !== null ? setToDos(JSON.parse(s)): null\n  }\n\n  const addToDo = async () => {\n    if (text === \"\") {\n      return;\n    }\n    const newToDos = { ...toDos, [Date.now()]: { text, working } }\n    setToDos(newToDos)\n    await saveToDos(newToDos)\n    setText(\"\")\n  }\n\n  const deleteToDo = (key) => {\n    if(Platform.OS === \"web\"){\n      const ok = confirm(\"Do you want to delete this To Do\")\n      if(ok){\n        const newToDos = {...toDos}\n            delete newToDos[key]\n            setToDos(newToDos)\n            saveToDos(newToDos)\n      }\n    }\n    else {\n      Alert.alert(\"Delete To Do\", \"Are you sure?\", \n      [\n        { text : \"Cancle\"},\n        {\n          text : \"Sure\",\n          onPress: () => {\n            const newToDos = {...toDos}\n            delete newToDos[key]\n            setToDos(newToDos)\n            saveToDos(newToDos)\n          }\n        }\n      ])\n    }\n   \n  }\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"auto\" />\n      <View style={styles.header}>\n        <TouchableOpacity onPress={work}>\n          <Text style={{ \n    fontSize: 38,\n    color: \"white\", color: working ? \"white\" : theme.grey }}>Work</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={travel}>\n          <Text style={{ \n    fontSize: 38,\n    color: \"white\", color: !working ? \"white\" : theme.grey }}>Travel</Text>\n        </TouchableOpacity>\n      </View>\n      <TextInput\n        onSubmitEditing={addToDo}\n        returnKeyType=\"done\"\n        onChangeText={onChangeText}\n        value={text}\n        placeholder={working ? \"Add a To Do\" : \"Where do you want to go?\"}\n        style={styles.input}\n      />\n      <ScrollView>\n        {Object.keys(toDos).map((key) =>\n          (toDos[key].working === working ?\n            (\n              <View style={styles.toDo} key={key}>\n                <Text style={styles.toDoText}> {toDos[key].text} </Text>\n                <TouchableOpacity onPress={() => deleteToDo(key)}>\n                  <Fontisto name = \"trash\" size={18} color= \"red\"/>\n                </TouchableOpacity>\n              </View>\n            ) : null\n        ))}\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: theme.bg,\n    paddingHorizontal: 20,\n  },\n  header: {\n    justifyContent: \"space-between\",\n    flexDirection: \"row\",\n    marginTop: 100,\n  },\n  btnText: {\n    fontSize: 38,\n    color: \"white\",\n  },\n  input: {\n    backgroundColor: \"white\",\n    paddingVertical: 15,\n    paddingHorizontal: 20,\n    borderRadius: 30,\n    marginVertical: 20,\n    fontSize: 18,\n  },\n  toDo: {\n    backgroundColor: theme.grey,\n    marginBottom: 10,\n    paddingVertical: 20,\n    paddingHorizontal: 20,\n    borderRadius: 15,\n    flexDirection : \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\"\n  },\n  toDoText: {\n    color: \"white\",\n    fontSize: 16,\n    fontWeight: \"500\",\n  },\n});\n"],"sourceRoot":""}